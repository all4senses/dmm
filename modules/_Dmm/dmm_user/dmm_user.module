<?php

/**
 * Implementation of hook_menu().
 */
function dmm_user_menu() {
  
  $items = array();
  
  $items['hc-notify'] = array(
    'page callback' => 'dmm_user_hcNotifyGet_ajax',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['comments-fragment'] = array(
    'page callback' => 'dmm_user_addFragmentForCommentForm_ajax',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
    
  
 /* 
  $items['user/%user/blog'] = array( 
      'title' => t('User blog'),
      //'title callback' => '_guestbook_info',
      //'title arguments' => array(1, 'title'),
      'page callback' => 'dmm_user_getUserContent', //'wdg_user_blog_page',
      'page arguments' => array(1, 'blog_post', 'blog post', 'blog posts'),
      //'access callback' => 'guestbook_menu_access_user_guestbook',
      //'access arguments' => array(1, 'access user guestbooks'),
      'access arguments' => array('access content'),
      'type' => MENU_LOCAL_TASK,
    );
*/

  $user_pages = array('blog' => 'blog_post', 'articles' => 'article', 'master-classes' => 'master_class', 'albums' => 'album');
  foreach ($user_pages as $url_part => $content_type) {
    $items['user/%user/' . $url_part] = array( 
      'title' => t("User's $url_part"),
      'title callback' => 'dmm_user_getUserTabTitle',
      'title arguments' => array(1, $url_part),
      'page callback' => 'dmm_user_getUserContent',
      'page arguments' => array(1, $url_part, $content_type),
      //'access callback' => 'guestbook_menu_access_user_guestbook',
      //'access arguments' => array(1, 'access user guestbooks'),
      'access arguments' => array('access content'),
      'type' => MENU_LOCAL_TASK,
    );
  }
    
  return $items;
  
}


/**
 * Implements hook drupal_alter for comment_view.
 */
function dmm_user_comment_view_alter(&$comment) {
  
  //dpm($comment);
  
/*  
  global $user;
  if (!$user->uid) {
    unset($comment['links']['comment']['#links']['comment_forbidden']);
  }
  
  
  // Get the current user's social accounts.

  $query = db_select('dmm_comment', 'dc');
  $query->fields('dc', array('data'))  
        ->condition('dc.cid', $comment['#node']->cid);
  $comment_user_social_data = $query->execute()->fetchField();
  
  if ($comment_user_social_data) {
    $comment_user_social_data = unserialize($comment_user_social_data);
    
    
    $comment['logged_via'] = array(
      '#markup' => '<div>' . $comment_user_social_data['provider'] . '</div>',
      '#weight' => -1,
    );
    $comment['picture'] = array(
      '#markup' => '<div>' . $comment_user_social_data['photo'] . '</div>',
      '#weight' => -1,
    );
    $comment['author'] = array(
      '#markup' => '<div>' . $comment_user_social_data['nickname'] . '---</div>',
      '#weight' => -2,
    );
  }
*/           
}


/**
 * Process variables for comment.tpl.php.
 *
 * @see comment.tpl.php
 */
function dmm_user_preprocess_comment(&$variables) {
  //$comment = $variables['elements']['#comment'];
  $author_uid = $variables['elements']['#comment']->uid;
  $node = $variables['elements']['#node'];
  //dpm($comment); //dpm($variables);
  
  global $user;
  if (!$user->uid) {
    // Hide links "login or register" for each comment, for anonymous
    unset($variables['elements']['links']['comment']['#links']['comment_forbidden'], $variables['content']['links']['comment']['#links']['comment_forbidden']);
  }
  
  // Get the current user's accounts.
  $query = db_select('dmm_comment', 'dc');
  $query->fields('dc', array('data'))  
        ->condition('dc.cid', $node->cid);
  $comment_user_social_data = $query->execute()->fetchField();
  
  if ($comment_user_social_data) {
    $comment_user_social_data = unserialize($comment_user_social_data);
    //dpm($comment_user_social_data);
    $variables['author'] = '<div><span>' . l($comment_user_social_data['nickname'], $comment_user_social_data['identity'], array('external' => TRUE, 'attributes' => array('target' => '_blank'))) . '</span><span> via ' . $comment_user_social_data['provider'] . '</span><span> (' . l('local profile', 'user/' . $author_uid) . ')</span></div>';
    //$variables['picture'] = '<div>' . $comment_user_social_data['photo'] . '</div>';
  }

  // Original code from comment.module
/*  
  $variables['comment']   = $comment;
  $variables['node']      = $node;
  $variables['author']    = theme('username', array('account' => $comment));
  $variables['created']   = format_date($comment->created);
  $variables['changed']   = format_date($comment->changed);

  $variables['new']       = !empty($comment->new) ? t('new') : '';
  $variables['picture']   = theme_get_setting('toggle_comment_user_picture') ? theme('user_picture', array('account' => $comment)) : '';
  $variables['signature'] = $comment->signature;

  $uri = entity_uri('comment', $comment);
  $uri['options'] += array('attributes' => array('class' => 'permalink', 'rel' => 'bookmark'));

  $variables['title']     = l($comment->subject, $uri['path'], $uri['options']);
  $variables['permalink'] = l(t('Permalink'), $uri['path'], $uri['options']);
  $variables['submitted'] = t('Submitted by !username on !datetime', array('!username' => $variables['author'], '!datetime' => $variables['created']));

  // Preprocess fields.
  field_attach_preprocess('comment', $comment, $variables['elements'], $variables);

  // Helpful $content variable for templates.
  foreach (element_children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }

  // Set status to a string representation of comment->status.
  if (isset($comment->in_preview)) {
    $variables['status'] = 'comment-preview';
  }
  else {
    $variables['status'] = ($comment->status == COMMENT_NOT_PUBLISHED) ? 'comment-unpublished' : 'comment-published';
  }

  // Gather comment classes.
  // 'comment-published' class is not needed, it is either 'comment-preview' or
  // 'comment-unpublished'.
  if ($variables['status'] != 'comment-published') {
    $variables['classes_array'][] = $variables['status'];
  }
  if ($variables['new']) {
    $variables['classes_array'][] = 'comment-new';
  }
  if (!$comment->uid) {
    $variables['classes_array'][] = 'comment-by-anonymous';
  }
  else {
    if ($comment->uid == $variables['node']->uid) {
      $variables['classes_array'][] = 'comment-by-node-author';
    }
    if ($comment->uid == $variables['user']->uid) {
      $variables['classes_array'][] = 'comment-by-viewer';
    }
  }
*/  
}


/**
 * Implements hook form_alter.
 */
function dmm_user_form_alter(&$form, &$form_state, $form_id) {
  
  //dpm($form_id); dpm($form);
  
  switch($form['#id']) {
    
    case 'comment-form':
      
        //dpm($form);
      
        if (isset($_SESSION['dmm_user_loginza_logged_as'])) {
          
            $current_logged_as = $_SESSION['dmm_user_loginza_logged_as'];
            
            $form['logged_via'] = array(
              '#markup' => '<div>' . $current_logged_as['provider'] . '</div>',
              '#weight' => -1,
            );
            $form['picture'] = array(
              '#markup' => '<div>' . $current_logged_as['photo'] . '</div>',
              '#weight' => -1,
            );
            $form['author']['#weight'] = -2;
            $form['author']['_author'] = array(
              '#markup' => '<div>' . $current_logged_as['nickname'] . '---</div>',
              //'#weight' => -2,
            );


            $form['#submit'][] = 'dmm_user_submitForm_comment';
            $form['#validate'][] = 'dmm_user_validateForm_comment';
        }
        
        break;
  }
  

}


/**
 * Custom validate of article type form.
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.

 * @return void
 *   Return nothing.
 */
function dmm_user_validateForm_comment(&$form, &$form_state) {

  
  //dpm($form_state['values']);
  
  if (isset($_SESSION['dmm_user_loginza_logged_as'])) {
    //dpm($_SESSION['dmm_user_loginza_logged_as']);
  }
  
}


/**
 * Custom validate of article type form.
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.

 * @return void
 *   Return nothing.
 */
function dmm_user_submitForm_comment(&$form, &$form_state) {

  //dpm($form_state['values']);
  if (isset($_SESSION['dmm_user_loginza_logged_as'])) {
    //dpm($_SESSION['dmm_user_loginza_logged_as']);
    $dmm_logged_as = $_SESSION['dmm_user_loginza_logged_as'];
    $comment_remote_acc_data = array(
      'provider' => $dmm_logged_as['provider'],
      'identity' => $dmm_logged_as['identity'],
      'uid' => $dmm_logged_as['uid'],
      'nickname' => $dmm_logged_as['nickname'],
      'photo' => $dmm_logged_as['photo'],
    );
    global $user;
    $result = db_insert('dmm_comment')
      ->fields(array(
        'cid' => $form_state['values']['cid'],
        'data' => serialize($comment_remote_acc_data),
      ))
      ->execute();
  }
  
}


/**
 * Implements hook_user_delete().
 */
function dmm_user_user_delete($account) {
  db_delete('dmm_users_social')
    ->condition('uid', $account->uid)
    ->execute();
}


/**
 * Implements hook_comment_delete().
 */
function dmm_user_comment_delete($comment) {
  db_delete('dmm_comment')
    ->condition('cid', $comment->cid)
    ->execute();
}

/**
 * Themed user block for the header.
 */
function dmm_user_userBlock() {
  
  global $user;
  
  if (!$user->uid) {
    
    dmm_user_initLogin();
    // V1, no need to launch drupal_add_library('system', 'drupal.ajax');
    //$out = ctools_modal_text_button(t('Login'), 'ajax_register/login/nojs', t('Login'), 'ctools-modal-ctools-ajax-register-style');
    // V2, need to launch drupal_add_library('system', 'drupal.ajax') in dmm_user_initLogin(), but possible to set more params in l()...
    $out = l(t('Login'), 'ajax_register/login/nojs', array('html' => TRUE, 'attributes' => array('rel' => 'nofollow', 'class' => array('dmm-login', 'ctools-use-modal', 'ctools-modal-ctools-ajax-register-style'), 'title' => t('Login'))));
  }
  else {
    $out = '<span class="user-profile">Hello, ' . theme('username', array('account' => $user, 'link_path' => 'user/' . $user->uid))  . '</span><span class="user-logout">' . l('Logout', 'user/logout', array('query' => array('destination' => ltrim(str_replace('#comment-form', '', $_SERVER['REQUEST_URI']), '/')))) . '</span>';
  }
  
  return $out;
}


/**
 * Themed log in to comment block.
 */
function dmm_user_loginToComment() {
  
  // modal_forms doesn't work both for loginza and a usual login PLUS doesn't understand GET params in the url
  //echo '<div class="login-to-comment"><a class="ctools-use-modal ctools-modal-modal-popup-medium" href="/modal_forms/nojs/login?destination=' . urlencode(ltrim(str_replace('#comment-form', '', $_SERVER['REQUEST_URI']), '/') . '#comment-form') . '">Modal Login</a></div>';
  
  // Use with ajax_login module.
  dmm_user_initLogin();
  
  // V1, no need to launch drupal_add_library('system', 'drupal.ajax');
  //$out = '<div class="login-to-comment">' . ctools_modal_text_button(t('Login to comment'), 'ajax_register/login/nojs', t('Login to comment'), 'ctools-modal-ctools-ajax-register-style')  . '</div>';
  // V2, need to launch drupal_add_library('system', 'drupal.ajax') in dmm_user_initLogin(), but possible to set more params in l()...
  $out = '<div class="login-to-comment">' . l(t('Login to comment'), 'ajax_register/login/nojs', array('html' => TRUE, 'attributes' => array('rel' => 'nofollow', 'class' => array('ctools-use-modal', 'ctools-modal-ctools-ajax-register-style'), 'title' => t('Login to comment'))))  . '</div>';
  
  return $out;
}


/**
 * Add fragment #comment-form to destination if used loginza, popup and was clicked login-to-comment link.
 */
function dmm_user_addFragmentForCommentForm_ajax() {
  
  $from = check_plain($_POST['from']);
  
  switch ($from) {
    
    case 'login-to-comment':
        $_SESSION['dmm_user_loginza_login_destination']['fragment'] = 'comment-form';
    case 'login':
        // Prevent a module login_destination from redefining the destination based on the $GLOBALS['destination'] param.
        unset($GLOBALS['destination']);
        // Tell a hook function dmm_user_drupal_goto_alter to set the right destination params for logging in via loginza.
        $_SESSION['dmm_user_loginza_login'] = TRUE;
        break;
  }
  
  drupal_json_output(array('status' => TRUE));
}


/**
 * Prepare login data for poopup and loginza.
 */
function dmm_user_initLogin() {
  
  global $dmm_login_initiated;
  
  if (!$dmm_login_initiated) {
    
    $dmm_login_initiated = TRUE;
    
    // ajax_login module functionality for popup ajax login.
    _ajax_register_include_modal();
    
    
    // V1, no need to launch drupal_add_library('system', 'drupal.ajax');
    //$out = ctools_modal_text_button(t('Login'), 'ajax_register/login/nojs', t('Login'), 'ctools-modal-ctools-ajax-register-style');
    // V2, need to launch drupal_add_library('system', 'drupal.ajax') in dmm_user_initLogin(), but possible to set more params in l()...
    //$out = l(t('Login'), 'ajax_register/login/nojs', array('html' => TRUE, 'attributes' => array('class' => array('ctools-use-modal', 'ctools-modal-ctools-ajax-register-style'), 'title' => t('Login'))));
    
    // So, comment if plan to use without ctools_modal_text_button()
    drupal_add_library('system', 'drupal.ajax');
    
    // Prepare the destination param for log in via loginza. 
    $query = $_GET;
    unset($query['q']);
    $_SESSION['dmm_user_loginza_login_destination'] = array(
      'destination' => ltrim(url($_GET['q']), '/'),
      'query' => $query,
      //'fragment' => 'comment-form',
    );
    
    $path_to_custom_js = drupal_get_path('module', 'dmm_user') . '/js/';
    drupal_add_js($path_to_custom_js . 'dmm_loginToCommentLink.js');
    
  }
}


/**
 * Action upon login via loginza, refine data.
 */
function dmm_user_loginza_data_refine(&$data, $account) {
  
  // Add a new provider to a list of providers (if does not exist).
  db_merge('dmm_social_providers')
      ->key(array('loginza_id' => $data['provider']))
      //->fields(array('data' => NULL))
      ->execute();
  
  // Get a provider dmm_id (existing before or just set).
  $query = db_select('dmm_social_providers', 'sp');
  $query->fields('sp', array('dmm_id'))  
        ->condition('sp.loginza_id', $data['provider']);
  $dmm_provider_id = $query->execute()->fetchField(); 
  
  // Get the current user's accounts.
  $query = db_select('dmm_users_social', 'us');
  $query->fields('us', array('data'))  
        ->condition('us.uid', $account->uid);
  $user_social_data = $query->execute()->fetchField();
  if ($user_social_data) {
    $user_social_data = unserialize($user_social_data);
  }
  
  // Add a new (or replace existing) account data by a provider name (loginza_id).
  // Before adding we append an inner dmm_id provider id to a source loginza array.
  $data['dmm_id'] = $dmm_provider_id;
  $user_social_data['accounts'][$data['provider']] = $data;
  
  // Put updated user social accounts data arrat back to the db.
  db_merge('dmm_users_social')
      ->key(array('uid' => $account->uid))
      ->fields(array('data' => serialize($user_social_data)))
      ->execute();
  
  $_SESSION['dmm_user_loginza_logged_as'] = $data;
  
  dpm('in dmm_user_loginza_data');
  dpm($data);
  dpm($account);
}


/**
 * Action upon login via loginza.
 */
function dmm_user_loginza_data($data, $account) {
  // Prevent a module login_destination from redefining the destination based on the $GLOBALS['destination'] param.
  unset($GLOBALS['destination']);
  // Tell a hook function dmm_user_drupal_goto_alter to set the right destination params for logging in via loginza.
  $_SESSION['dmm_user_loginza_login'] = TRUE;
  
  // It could be initialized in hook_user_register_alter().
  if(!isset($_SESSION['dmm_user_loginza_logged_as'])) {
    dmm_user_loginza_data_refine($data, $account);
  }
  
}


/**
 * Implements hook_drupal_goto_alter
 */
function dmm_user_drupal_goto_alter(&$path, &$options, &$http_response_code) {
  // Makes sure a user will be redirected to the source page after login via loginza, initiated in a popup window by ajax_login module.
  // A destination (source) page should define a destination params in $_SESSION['dmm_user_loginza_login_destination'],
  // and the param $_SESSION['dmm_user_loginza_login'] should be set in hook_loginza_data, informing us that we are in the process of logtinza login.
  if (isset($_SESSION['dmm_user_loginza_login'])) {
    unset($_SESSION['dmm_user_loginza_login']);
    if (is_array($_SESSION['dmm_user_loginza_login_destination'])) {
      $path = $_SESSION['dmm_user_loginza_login_destination']['destination'];
      $options['query'] = $_SESSION['dmm_user_loginza_login_destination']['query'];
      $options['fragment'] = @$_SESSION['dmm_user_loginza_login_destination']['fragment'];
    }
    else {
      $path = $_SESSION['dmm_user_loginza_login_destination'];
      $options = NULL;
    }
  }
  
}


/**
 * Returns user's content.
 */
function dmm_user_hcNotifyGet_ajax() {
   $status = TRUE;
  //$output = 'gv_misc_testPage_requestTest()----';
  
  $post = array();
  foreach ($_POST as $key => $value) {
    $post[$key] = check_plain(strip_tags($value));
  }
  
  global $language;
  $params['hcNotify_data'] = $post;

  drupal_mail('dmm_user', 'hcNotify_data', 'all4senses@gmail.com', $language->language, $params);

  drupal_json_output(array('status' => $status, /*'data' => $output, 'post' => $_POST, 'token' => $post['token'], 'test_token' => $test_token, 'valid_token' => $valid_token, 'letter' => $letter*/));
}


/**
 * Implements hook_mail().
 */
function dmm_user_mail($key, &$message, $params) {
  switch ($key) {
    case 'hcNotify_data':

        foreach ($params['hcNotify_data'] as $k => $value) {
          if ($k == 'data') {
            $notify[$k] = json_decode(urldecode(str_replace('%26quot%3B', '%22', urlencode($value))));
          }
          else {
            $notify[$k] = $value;
          }
        }
 
      $message['subject'] = t('HC comments notify');
      $message['body'][] = serialize($notify); //$string;
      break;
  }
  
}  


/**
 * Returns user's content.
 */
function dmm_user_getUserTabTitle($account, $content_title){
  return t("@name's " . $content_title, array('@name' => format_username($account)));
}


/**
 * Returns user's content.
 */
function dmm_user_getUserContent($account, $content_title, $content_type){
  
  $preface = NULL;
  
  // Get specific user page preface by a preface key.
  $field_prefaces_ids = field_get_items('user', $account, 'field_user_prefaces');
  foreach ($field_prefaces_ids as $field_prefaces_id) {
    $field_collection = field_collection_field_get_entity($field_prefaces_id);
    // Almost the same.
    //$field_collection = field_collection_item_load($field_prefaces_id['value']);
    //$prefaces[] = $field_collection->view();
    if ($field_collection->field_key_list['und'][0]['value'] == $content_type) {
      $preface = render($field_collection->view());
      break;
    }
  }
  
  // An other method, does the same.
  /*
  $wrapper = entity_metadata_wrapper('user', $account);
  foreach ($wrapper->field_user_prefaces as $field_collection){
    //$prefaces[] = array('field_collection' => $field_collection->view(), 'field_collection_rendered' => render($field_collection), 'key' => $field_collection->field_key_list->value());
    if ($i->field_key_list->value() == $content_type) {
      $preface = render($field_collection->view());
      break;
    }
  }
  */
  
  
  
  drupal_set_title($title = t("@name's " . $content_title, array('@name' => format_username($account))), PASS_THROUGH);
  $user_content = dmm_pages_getContentFeedWithControls($content_type, $account->uid);
  
  // It a preface is defined, don't show the title (using preface's one).
  return ($preface ? $preface : '<h1>' . $title . '</h1>') . $user_content;
}




/**
 * Implements hook_user_load().
 */
function dmm_user_user_load($users) {
  dpm($users);

}


/**
 * Implements hook_user_view().
 */
function dmm_user_user_view($account, $view_mode, $langcode) {
  dpm($account);
/*    
//  $dmm_user_mode = variable_get('dmm_user_mode', dmm_user_SITE_dmm_user | dmm_user_USER_dmm_userS);
//  if ($dmm_user_mode & dmm_user_USER_dmm_userS) {
//    if (user_access('access user dmm_users') && empty($account->data['dmm_user_status'])) {
//      $title = t("Read @username's dmm_user.", array('@username' => $account->name));
//      $link  = l(t('View recent dmm_user entries'), "user/$account->uid/dmm_user", array('attributes' => array('title' => $title)));
   

    
    
// Append guestbook on user profile page    
    
    
// TODO: makeown guestbook for each user (on demand?) on user create or by link
$gbook = node_load(4);
$gbook_comments = comment_node_page_additions($gbook); 
////dpm($gbook_comments); //dpm($gbook);

$gbook = node_view($gbook);
unset($gbook['links']['comment']); // remove link "add new comment as we have a form below"
      $account->content['dmm_guestbook'] = array(
        '#type' => 'user_profile_item',
        '#title' => t('The Wall'),
        '#markup' => render($gbook) . render($gbook_comments['comment_form']) . render($gbook_comments['comments']),
        //'#attributes' => array('class' => 'dmm_user'),
        '#weight' => 10,
      );
*/
}





/**
 * Implements hook_form_FORM_ID_alter().
 */
function dmm_user_form_user_register_form_alter(&$form, &$form_state) {
    
  // Set up the right nickname (username) for user registered via loginza
  // !!!!!!!!!!!!!!!!!!!!!  MUST have weight bigger then loginza in a system table
  
  //dpm('reg form start');
  //dpm($form);
  //dpm('reg form finish');
  
  if (isset($_SESSION['loginza']['data'])) {
    $data = $_SESSION['loginza']['data'];
    
    // It's necessary in hook_user_insert() because $_SESSION['loginza']['data'] will be cleared by loginza before that time.
    $_SESSION['dmm_user_loginza_initial_data'] = $_SESSION['loginza']['data'];
   
    
    $form['account']['name']['#default_value'] = dmm_user_loginza_username($data); //strtolower(str_replace(' ', '.', $data['name']['full_name'])); //_loginza_username($data);
    $form['field_first_name']['und'][0]['value']['#default_value'] = @$data['name']['first_name'];
    $form['field_last_name']['und'][0]['value']['#default_value'] = @$data['name']['last_name'];
    
    // Set a full name.
    if (!empty($data['name']['full_name'])) {
      $full_name = $data['name']['full_name'];
    }
    else {
      $name_parts = array();
      if (!empty($data['name']['first_name'])) {
        $name_parts[] = $data['name']['first_name'];
      }
      if (!empty($data['name']['last_name'])) {
        $name_parts[] = $data['name']['last_name'];
      }
      $full_name = trim(implode(' ', $name_parts));
    }
    $form['field_full_name']['und'][0]['value']['#default_value'] = $full_name;
 }

}



/**
 * Implements hook_user_presave().
 */
function dmm_user_user_presave(&$edit, $account, $category) {
  /*
  foreach (array('dmm_user_status', 'dmm_user_send_email', 'dmm_user_intro') as $key) {
    if (isset($edit[$key])) {
      $edit['data'][$key] = $edit[$key];
    }
  }
  */
  
  // Set a full_name if it's empty.
  if(!isset($edit['field_full_name']['und'][0]['value']) || !$edit['field_full_name']['und'][0]['value']) {
    if( (isset($edit['field_first_name']['und'][0]['value']) && $edit['field_first_name']['und'][0]['value']) || (isset($edit['field_last_name']['und'][0]['value']) && $edit['field_last_name']['und'][0]['value'])) {
      $edit['field_full_name']['und'][0]['value'] = trim(@$edit['field_first_name']['und'][0]['value'] . ' ' . @$edit['field_last_name']['und'][0]['value']);
    }
  }
  
}


/**
 * Implements hook_user_insert().
 */
function dmm_user_user_insert(&$edit, $account) {
  
  
  // Retrieve the user's picture from remote social network.

  // $_SESSION['dmm_user_loginza_initial_data'] is set in user_register_folr_alter because before that time the source var from Loginza are cleared by :oginza.
  if (isset($_SESSION['dmm_user_loginza_initial_data'])) {
    
    $loginza_data = $_SESSION['dmm_user_loginza_initial_data'];
   
    dmm_user_loginza_data_refine($loginza_data, $account);
    
    $picture_directory =  file_default_scheme() . '://' . variable_get('user_picture_path', 'avatars');
    
    if(file_prepare_directory($picture_directory, FILE_CREATE_DIRECTORY)){
      
      $picture_result = drupal_http_request($loginza_data['photo']);
      //$picture_path = file_stream_wrapper_uri_normalize($picture_directory . '/picture-' . $account->uid . '-' . REQUEST_TIME . '.jpg');
      
      if(isset($picture_result->headers['content-type']) && strpos($picture_result->headers['content-type'], 'mage/') && !$picture_ext = str_replace('image/', '', $picture_result->headers['content-type'])) {
        $picture_ext = 'jpeg';
      }
      $picture_path = file_stream_wrapper_uri_normalize($picture_directory . '/s/u' . $account->uid . '-s' . $loginza_data['dmm_id'] . '.' . $picture_ext);
      
      $picture_file = file_save_data($picture_result->data, $picture_path, FILE_EXISTS_REPLACE);

      // Check to make sure the picture isn't too large for the site settings.
      $max_dimensions = variable_get('user_picture_dimensions', '85x85');
      file_validate_image_resolution($picture_file, $max_dimensions);

      // Update the user record.
      $picture_file->uid = $account->uid;
      $picture_file = file_save($picture_file);
      file_usage_add($picture_file, 'user', 'user', $account->uid);
      
      db_update('users')
        ->fields(array(
        'picture' => $picture_file->fid,
        ))
        ->condition('uid', $account->uid)
        ->execute();
      
      //$edit['picture'] = $picture_file->fid;
    }
    
    
  } // End of if (isset($_SESSION['dmm_user_loginza_logged_as'])) {

}


/**
 * Corrected replace for _loginza_username($data).
 */
function dmm_user_loginza_username($data) {
  $name = '';
  if (isset($data['name'])) {
    if (!empty($data['name']['full_name'])) {
      $name = $data['name']['full_name'];
    }
    else {
      $name_parts = array();
      if (!empty($data['name']['first_name'])) {
        $name_parts[] = $data['name']['first_name'];
      }
      if (!empty($data['name']['last_name'])) {
        $name_parts[] = $data['name']['last_name'];
      }
      $name = trim(implode(' ', $name_parts));
    }
  }

  if (empty($name)) {
    $name = empty($data['nickname']) ? variable_get('loginza_default_name', 'user@dmm') : $data['nickname'];
  }

  // check duplicate user name
  $base_name = $name;
  $count = NULL;
  while (TRUE) {
    $uid = db_query("SELECT uid FROM {users} WHERE name = :name", array(':name' => $name))->fetchField();
    if (empty($uid)) break;
    $name = $base_name . ' ' . ++$count;
  }

  return $name;
}


/**
 * Implementation of hook_permission().
 */
/*
function dmm_user_permission() {
  return array(
    'moderate all dmm_users' => array(
      'title' => t('Moderate all dmm_users'),
    ),
    'moderate own dmm_user' => array(
      'title' => t('Moderate own dmm_user'),
    ),
    'access site dmm_user' => array(
      'title' => t('View site dmm_user'),
    ),
    'access user dmm_users' => array(
      'title' => t('View user dmm_users'),
    ),
    'post in site dmm_user' => array(
      'title' => t('Post in site dmm_user'),
    ),
    'post in user dmm_users' => array(
      'title' => t('Post in user dmm_users'),
    ),
  );
}
*/
