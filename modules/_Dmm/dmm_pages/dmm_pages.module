<?php

/**
 * Implementation of hook_menu().
 */
function dmm_pages_menu() {
    
  $items = array();
  
  $items['home'] = array( 
    //'title' => t('Home'),
    'page callback' => 'dmm_pages_getHomePage',
    //'page arguments' => array(1, 'blog_post', 'blog post', 'blog posts'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['get/iframe/ok'] = array(
    'title' => 'Page for OK',
    'page callback' => 'dmm_page_getIframe_OK',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
    
  return $items;
}



/**
 * Returns page for an iframe in OK.
 */
function dmm_page_getIframe_OK() {
  
  $out = '.';
  return $out;
}


/**
 * Returns home page.
 */
function dmm_pages_getHomePage() {
  
  $out = '';
  
  
  // Mws shop iframe.
  /*
  global $user;
  if (!$user->uid) {
    $out .= '<div id="mws"></div><script type="text/javascript" src="http://mws.all4senses.com/mws.js"></script>';
  }
  else {
    //$out .= '<div class="sliderHome">' . dmm_image_getSlideshow('AdvancedSlider') . '</div>';
  }
  */
  
  $front_preface_node = dmm_pages_getPrefaceByKey('front');
  $front_preface_node->title_no_link = TRUE;
  $front_preface_node_view = node_view($front_preface_node, 'full');

  $out .= render($front_preface_node_view);
  
  
  // Get block Home teasers.
  $block_data = array('module' => 'views', 'delta' => 'content_feeds-home_teasers_block', 'shadow' => FALSE, 'no_subject' => TRUE);
  $out .= dmm_blocks_getBlockThemed($block_data);
  
  
  $out .= render($front_preface_node_view['field_preface_bottom']);
 
  return $out;
}


/**
 * Returns preface node by key.
 */
function dmm_pages_getPrefaceByKey($key) {
    
    $preface_node = NULL;
    
    $query = db_select('node', 'n');
    $query->join('field_data_field_key', 'pk', "pk.entity_id = n.nid"); 
    $query->fields('n', array('nid'))  
          //->fields('pn', array('field_key_value')) 
          ->condition('n.type', 'preface')
          ->condition('pk.field_key_value', $key); 
    $preface_nid = $query->execute()->fetchField(); 
    if ($preface_nid) {
      $preface_node = node_load($preface_nid);
    }
    return $preface_node;
}


/**
 * Returns section's blocks.
 */
function dmm_pages_getSectionBlocks($node, $default_list_view_style = 'teaser') {
  
  if (/*!isset($node->field_tags['und']) || */empty($node->field_tags['und'])) {
    return;
  }
  
  $node->sectionBlocks = array();
  $tids = NULL;
  
  //dpm($node->field_tags['und']);
  foreach($node->field_tags['und'] as $term) {
    $tids[$term['tid']] = $term['tid'];
    $allTags[$term['taxonomy_term']->name] = $term['taxonomy_term'];
  }

  
  
  
  
  // Add tags filter block.

  $url_tags = explode(',', @$_GET['tags-exclude']);
  foreach ($allTags as $tag_name => $tag_data) {
    if (!in_array($tag_name, $url_tags)) {
      $selectedTags[$tag_data->tid] = $tag_name;
    }
    else {
      unset($tids[$tag_data->tid]);
    }
  }
  
  $selectTags = dmm_pages_themeTagsSelect($allTags, $selectedTags);
  
  $node->sectionBlocks['selectTags'] = '<div class="filter-block">' . $selectTags . '<div id="sectionIsFiltered">' . t('The section is filtered, some content is excluded by the tags filter. You may include it back by selecting excluded tags.') . '</div></div>';
          
  drupal_add_js('sites/all/libraries/jquery.plugins/chosen.jquery/chosen.jquery.js');
  drupal_add_css('sites/all/libraries/jquery.plugins/chosen.jquery/chosen.css', array('preprocess' => FALSE)); // array('group' => CSS_THEME, 'preprocess' => FALSE)

  $path_to_module = drupal_get_path('module', 'dmm_pages');
  drupal_add_js($path_to_module . '/js/dmm_sectionFilter.js');
  
 
  
  
  
  
  
  
  // Add content blocks.
  
  
  
  
  // Set a view type.
  
  // Set a view style. Teasers by default
  if ($default_list_view_style == 'teaser') {
    $currentViewStyle = (isset($_GET['view']) && $_GET['view'] == 'titles') ? 'titles' : 'teasers';
  }
  else {
    $currentViewStyle = (isset($_GET['view']) && $_GET['view'] == 'teasers') ? 'teasers': 'titles';
  }
  
  $get = $_GET;
  unset($get['q']);
  if ($currentViewStyle == 'teasers') {
    $get['view'] = 'titles';
    $newViewStyleTitle = t('View Titles');
    $currentViewStyleTitle = t('View Teasers');
  }
  else {
    $get['view'] = 'teasers';
    $newViewStyleTitle = t('View Teasers');
    $currentViewStyleTitle = t('View Titles');
  }
  $currentUrl = ltrim($_SERVER['REDIRECT_URL'], '/');
  $viewStyle = !@$currentViewStyleTitle ? '' : '<div class="view-style"><span>' . $currentViewStyleTitle . '</span>  | ' . l($newViewStyleTitle, $currentUrl, array('query' => $get)) . '</div>';
  $node->sectionBlocks['viewStyle'] = $viewStyle;
  
  $view_name = 'section_blocks';
  //$display_name = 'section_titles_block';
  $display_name = ($currentViewStyle == 'teasers') ? 'section_teasers_block' : 'section_titles_block';
  
  
  
  
  
  // Set tags.
  $viewsFilterOptions_tid = array('id' => 'tid', 'value' => $tids, 'type' => 'select', 'vid' =>  'tags', 'hierarchy' => 1, 'reduce_duplicates' => 1, 'group' => 0);
  
  
  
  
  
  
  // Set content types to collect for this section.
  
  // Confine shown articles by those set in the section Content types select field.
  $nodeTypesToShow_all = array('article' => 'Статьи', 'album' => 'Альбомы', 'master_class' => 'Мастер-классы', 'blog_post' => 'Посты в Блогах');
  
  // If some type name contains '___' it means that it contain an access marker ('___public'or '___user')
  // We need to handle it, strip markers and set an access marker separately from the content type name.
  $content_access_types = array('user' => '0', 'private' => '1', 'library' => '2');
  $nodeTypesToShow_access = array();
  
  if (isset($node->field_content_types['und'])) {
    foreach ($node->field_content_types['und'] as $content_type) {
      $content_type = $content_type['value'];
      if (strpos($content_type, '___')) {
        // 'album___library'
        $content_type = explode('___', $content_type);
        $nodeTypesToShow_access[$content_type[0]][$content_access_types[$content_type[1]]] = $content_access_types[$content_type[1]];
        $content_type = $content_type[0];
      }
      $nodeTypesToShow[$content_type] = $nodeTypesToShow_all[$content_type];
    }
  }
  else {
    $nodeTypesToShow = array();
  }
  
  
  // Now we are ready to get all content grouped by a content types.
  foreach ($nodeTypesToShow as $type => $title) {
    
    $view = views_get_view($view_name);
    $view->add_item($display_name, 'filter', 'taxonomy_index', 'tid', $viewsFilterOptions_tid);
    $viewsFilterOptions_nodeType = array('id' => 'type', 'value' => array($type => $type));
    $view->add_item($display_name, 'filter', 'node', 'type', $viewsFilterOptions_nodeType);

    // Add a filter by access type (user, library, etc), if set (defined a bit above)
    if (isset($nodeTypesToShow_access[$type])) {
      $viewsFilterOptions_accessTypes = array('id' => 'field_access_type_dmm_value', 'reduce_duplicates' => TRUE, 'value' => $nodeTypesToShow_access[$type]);
      $view->add_item($display_name, 'filter', 'field_data_field_access_type_dmm', 'field_access_type_dmm_value', $viewsFilterOptions_accessTypes);
    }
    
    
    /* Filter criterion: Content: Access type (field_access_type_dmm) */
//    $handler->display->display_options['filters']['field_access_type_dmm_value']['id'] = 'field_access_type_dmm_value';
//    $handler->display->display_options['filters']['field_access_type_dmm_value']['table'] = 'field_data_field_access_type_dmm';
//    $handler->display->display_options['filters']['field_access_type_dmm_value']['field'] = 'field_access_type_dmm_value';
//    $handler->display->display_options['filters']['field_access_type_dmm_value']['value'] = array(
//      0 => '0',
//      2 => '2',
//    );
//    $handler->display->display_options['filters']['field_access_type_dmm_value']['reduce_duplicates'] = TRUE;
    
    
    
    
    
    $results = $view->preview($display_name);
    //if ($view->total_rows) {
    if ($view->result) {
      $node->sectionBlocks[$type] = '<h3>' . $title . '</h3>' . $results;
      //$node->sectionBlocks[$display] = $view->render($display);
    }
  } // End of foreach ($nodeTypesToShow as $type => $title) {
  
  
  // Add authors blocks.
  
  $view_name = 'section_users_blocks';
  $display_name = 'section_users_titles_block';
  $view = views_get_view($view_name);
  $viewsFilterOptions_authors = array(
    'id' => 'tid', 
    'value' => $tids,
    'relationship' => 'uid',
    'type' => 'select',
    'reduce_duplicates' => 1,
    'vocabulary' => 'tags',
    'hierarchy' => 1,
  );
  
  $view->add_item($display_name, 'filter', 'taxonomy_index', 'tid', $viewsFilterOptions_authors);

  $results = $view->preview($display_name);
  //if ($view->total_rows) {
  if ($view->result) {
    $node->sectionBlocks['authors'] = '<h3>' . 'Авторы' . '</h3>' . $results;
    //$node->sectionBlocks[$display] = $view->render($display);
  }
  
}


/**
 * Returns themed TagsSelect blocks.
 */
function dmm_pages_themeTagsSelect($tags = NULL, $selected_terms = array(), $disabled_terms = array()) {
  
  if (empty($tags)) {
    return;
  }
  
  $selectTags = '<select id="select-tags" data-placeholder="' . t('Select tags') . '" style="width:350px;" multiple class="chzn-select" tabindex="8">
          <option value=""></option>';
  foreach ($tags as $tag) {
    $selectTags .= '<option value="' . $tag->name . '"' . (in_array($tag->name, $selected_terms) ? ' selected': '') . (in_array($tag->name, $disabled_terms) ? ' disabled': '') . '>' . $tag->name . '</option>';
  }
  $selectTags .= '</select>
        <div id="doFilter">Filter</div>';
  return $selectTags;
}


/**
 * Returns themed AuthorSelect blocks.
 */
function dmm_pages_themeAuthorsSelect($selected_username = NULL, $all_authors = array(), $eligible_authors = array()) {
  
  if (empty($all_authors)) {
    return NULL;
  }
  
  //dpm($all_authors);
  
  $selectTags = '<select id="select-authors" data-placeholder="' . t('Select author') . '" style="width:350px;" class="chzn-select" tabindex="8">
          <option value=""></option>';
  
  foreach ($all_authors as $username => $realname) {
    $selectTags .= '<option value="' . $username . '"' . ($username == $selected_username ? ' selected': '') . (!in_array($realname, $eligible_authors) ? ' disabled': '') . '>' . $realname . '</option>';
  }
  $selectTags .= '</select>
        <div id="goToAuthorPage">' . t("Visit this author's profile") . '</div>';
  
  return $selectTags;
}


/**
 * Returns content feed for a specific content type.
 */
function dmm_pages_getContentFeedWithControls($type, $uid = NULL, $default_list_view_style = 'teaser') {
  
  $terms = NULL;
  $allTags = array();
  $url_tags = array();
  $selectTags = NULL;
  
  // Get all tags for a specific content type.
  $query = db_select('taxonomy_term_data', 'td')
        ->fields('td', array('name', 'tid'));
  $query->leftJoin('taxonomy_index', 'ti', 'ti.tid = td.tid');
  $query->leftJoin('node', 'n', 'n.nid = ti.nid');
  $query->where('n.nid = ti.nid AND n.type = :type', array(':type' => $type))
        ->addExpression('COUNT(n.nid)', 'count');
  $query->groupBy('td.name');
  $query->condition('td.vid', 1);
  $results = $query->execute();
  foreach($results as $result) {
    $allTags[$result->tid] = /*(array)*/ $result;
  }
  
  
  
  $currentUrl = ltrim($_SERVER['REDIRECT_URL'], '/');
  
  // Set a view style (teasers/titles). Teasers by default.
  if ($default_list_view_style == 'teaser') {
    $currentViewStyle = (isset($_GET['view']) && $_GET['view'] == 'titles') ? 'titles' : 'teasers';
  }
  else {
    $currentViewStyle = (isset($_GET['view']) && $_GET['view'] == 'teasers') ? 'teasers': 'titles';
  }
  

  $view_name = 'content_feeds';
  $display_name = ($currentViewStyle == 'teasers') ? 'content_feed_teasers_block' : 'content_feed_titles_block';
  $view = views_get_view($view_name);
  $viewsFilterOptions_nodeType = array('id' => 'type', 'value' => array($type => $type));
  $view->add_item($display_name, 'filter', 'node', 'type', $viewsFilterOptions_nodeType);
  
  
  if (isset($_GET['tags'])) {
    $url_tags = explode(',', $_GET['tags']); //array('бисер', 'дизайн');
    $query = db_select('taxonomy_term_data', 'td');
    $query->fields('td', array('tid'))
          ->condition('td.name', $url_tags, 'IN');
    $tids = $query->distinct()
    ->execute()->fetchCol();
    
    if ($tids) {
      foreach ($tids as $tid) {
        $options[$tid] = $tid;
      }
      $viewsFilterOptions_tids = array('id' => 'tid', 'reduce_duplicates' => 1, 'type' => 'select', 'vocabulary' => 'tags', 'value' => $options);
      $view->add_item($display_name, 'filter', 'taxonomy_index', 'tid', $viewsFilterOptions_tids);
    }
  }
  
  
  
  $users_select = NULL;
  
  if ($uid) {
    
    // Call from a user page.
    
    $viewsFilterOptions_user = array('id' => 'uid', 'value' => array(0 => $uid));
    $view->add_item($display_name, 'filter', 'node', 'uid', $viewsFilterOptions_user);
  }
  else {
    
    // Call from a content page.
    
    $url_uid = @$_GET['author'];
    if ($url_uid) {
      $viewsFilterOptions_user = array('id' => 'uid', 'value' => array(0 => $url_uid));
      $view->add_item($display_name, 'filter', 'node', 'uid', $viewsFilterOptions_user);
    }
    
    // Get all users that have content of a specific type

    $query = db_select('node', 'n');
    $query->leftJoin('users', 'u', 'u.uid = n.uid');
    $query->leftJoin('realname', 'rn', 'rn.uid = n.uid');

    $query->fields('u', array('uid', 'name'))
          ->fields('rn', array('realname'))
          ->condition('n.type', $type)
          ->condition('n.status', 1);

    $users = $query->distinct()
    ->execute();

    $all_authors = NULL;
    foreach ($users as $user) {
      $all_authors[$user->name] = $user->realname;
    }


    // Refine conditions and get only users that have specific tag in their content (of a specific type)
    if (@$tids) {
      $or = db_or();
  //    foreach ($tids as $count => $tid) {
  //      $query->leftJoin('taxonomy_index', "ti_$count", "ti_$count.nid = n.nid AND ti_$count.tid = $tid");
  //    }
      foreach ($tids as $count => $tid) {
        $query->leftJoin('taxonomy_index', "ti_$count", "ti_$count.nid = n.nid AND ti_$count.tid = $tid");
        $or->condition("ti_$count.tid", $tid);
      }
      $query->condition($or);
    }

    $users = $query->distinct()
    ->execute();

    $eligible_authors = NULL;

    foreach ($users as $user) {
      $eligible_authors[$user->name] = $user->realname;
    }

    $users_select = '<div class="filter-block">' . dmm_pages_themeAuthorsSelect($url_uid, $all_authors, $eligible_authors) . '</div>';
  }
      
      
      
  $results = $view->preview($display_name);
  if ($view->total_rows) {
    
    $get = $_GET;
    unset($get['q']);
    if ($currentViewStyle == 'teasers') {
      $get['view'] = 'titles';
      $newViewStyleTitle = t('View Titles');
      $currentViewStyleTitle = t('View Teasers');
    }
    else {
      $get['view'] = 'teasers';
      $newViewStyleTitle = t('View Teasers');
      $currentViewStyleTitle = t('View Titles');
    }
  }
  else {
    $results = '<div class="results">' . t('No content found.') . '</div>';
  }
  
  // Build a tags block.
  //dpm($view->total_rows);
  //dpm($allTags);
  //dpm($url_tags);
  
  if ( (!empty($allTags) && $view->total_rows) || (!$view->total_rows && !empty($allTags) && !empty($url_tags)) ) {

    $selectTags = '<div class="filter-block">' . dmm_pages_themeTagsSelect($allTags, $url_tags) . '</div>';

    drupal_add_js('sites/all/libraries/jquery.plugins/chosen.jquery/chosen.jquery.js');
    drupal_add_css('sites/all/libraries/jquery.plugins/chosen.jquery/chosen.css', array('preprocess' => FALSE)); // array('group' => CSS_THEME, 'preprocess' => FALSE)

    $path_to_module = drupal_get_path('module', 'dmm_pages');
    drupal_add_js($path_to_module . '/js/dmm_contentFilter.js');
  }
  
  $viewStyle = !@$currentViewStyleTitle ? '' : '<div class="view-style"><span>' . $currentViewStyleTitle . '</span>  | ' . l($newViewStyleTitle, $currentUrl, array('query' => $get)) . '</div>';
  $controlBlock = '<div class="feed-control">' . $viewStyle . $users_select . $selectTags . '</div>';
  
  return $controlBlock . $results;
}


/**
 * Implements hook node_view.
 */
function dmm_pages_node_view($node, $view_mode) {
  switch ($node->type) {
    case 'section':
      if ($view_mode == 'full') {
        dmm_pages_getSectionBlocks($node);
      }
      break;
    
    case 'preface':
      $key = @$node->field_key['und'][0]['value'];
      switch($key) {
        case 'master_class':
        case 'article':
        case 'album':
          $node->contentFeed = dmm_pages_getContentFeedWithControls($key);
          break;
      }
      break; // End of 'preface'
  } // End of switch ($node->type) {
  
}


/**
 * Returns miniteasers.
 */
function dmm_pages_buildMiniTeasersSet($nids){
    
    $build = null;
    if(is_array($nids))
        foreach($nids as $nid)
        {
            if($node = db_query("SELECT u.name, n.nid, n.title, n.created AS date, i.field_main_image_value AS main_image, a.alias AS node_url
                                FROM {node} n 
                                LEFT JOIN {users} u ON u.uid = n.uid
                                LEFT JOIN {field_data_field_main_image} i ON i.entity_type = 'node' AND i.entity_id = n.nid 
                                LEFT JOIN {url_alias} a ON a.source = 'node/" . $nid . "' 
                                WHERE n.nid = :nid", 
                        array(':nid' => $nid)
                    )->fetchObject())
            {
            
                $build['nodes'][] = array(
                            '#theme' => 'dmm_pages_ImageMiniTeaser',
                            '#node' => $node,
                            );
            }
            /*
            $build['nodes'] = array(
                        0 => array(
                          '#theme' => 'dmm_pages_ImageMiniTeaser',
                          //'#weight' => -10,
                          '#node' => array(
                                    0 => '11111',
                                    1 => '22222',
                                    '#markup' => '<div>yyy</div>',
                                ),
                        ),
                        1 => array(
                          '#theme' => 'dmm_pages_ImageMiniTeaser',
                          //'#weight' => -10,
                          '#node' => array(
                                    0 => '3333',
                                    1 => '4444',
                                ),
                          '#weight' => -5,
                        ),
                        '#weight' => -5,
            );
            */
        }
    
    return $build;    
}


/**
 * Returns user's content.
 */
function dmm_pages_getUserContent($account, $type, $singular_title, $plural_title, $build_condition = array(), $build_function = null){
    
  global $user;  
  
  drupal_set_title($title = t("@name's " . $plural_title, array('@name' => format_username($account))), PASS_THROUGH);

  $build = array();

  $query = db_select('node', 'n')->extend('PagerDefault');
  $nids = $query
    ->fields('n', array('nid', 'sticky', 'created'))
    ->condition('type', $type)
    ->condition('uid', $account->uid)
    ->condition('status', 1)
    ->orderBy('sticky', 'DESC')
    ->orderBy('created', 'DESC')
    ->limit(variable_get('default_nodes_main', 10))
    ->addTag('node_access')
    ->execute()
    ->fetchCol();

  if (!empty($nids)) {
    if($build_function 
            AND isset($_GET[$build_condition[0]]) 
            AND $_GET[$build_condition[0]] == $build_condition[1]
            AND is_array($nodes = $build_function($nids))
      )
    {
        $build += $nodes;;
        //$build_function($nids);
    }
    else
    {
        $nodes = node_load_multiple($nids);
        $build += node_view_multiple($nodes);
    }
    $build['pager'] = array(
      '#theme' => 'pager',
      '#weight' => 5,
    );
  }
  else {
    if ($account->uid == $user->uid) {
      drupal_set_message(t('You have not yet created any ' . $singular_title . ' entries.'));
    }
    else {
      drupal_set_message(t('!author has not yet created any ' . $singular_title . ' entries.', array('!author' => theme('username', array('account' => $account)))));
    }
  }
  /////drupal_add_feed('blog/' . $account->uid . '/feed', t('RSS - !title', array('!title' => $title)));


//$build += $temp;
//$build['my'][0] = '<div>yyy</div>';
  return $build;
}


/**
 * Implements hook theme.
 */
function dmm_pages_theme($existing, $type, $theme, $path) {
  return array(
    'dmm_pages_ImageMiniTeaser' => array(
      'variables' => array('node' => array()),
      //'path' => path_to_theme(),
      'template' => 'dmm_pages_ImageMiniTeaser',
    ),  
            
  );
}


/**
 * Implements hook node_presave.
 */
function dmm_pages_node_presave($node) {
  
    // Build teaser, gallery, find images (main, sharing, etc).
  
    $content_with_teaser = array('article', 'master_class', 'album', 'blog_post', 'section');
    $content_with_teaser_and_slideshow = array('master_class', 'album');
    
    if (in_array($node->type, $content_with_teaser)) {
      
      // If this is a new node, yet without nid, let's find out supposed its id
      if(!$nid = $node->nid) {
        $nid = db_next_id(db_query('SELECT MAX(nid) FROM {node}')->fetchField());
      }

      $extra_data = dmm_pages_getExtraDataFromBody($node->body, $nid, $node->type);
         
      if(in_array($node->type, $content_with_teaser_and_slideshow) && $body_images = dmm_image_findImages($node->body['und'][0]['value'], $nid)) {
        //$node->field_main_image['und'][0]['value'] = serialize($body_images[0]);
        //$node->field_body_to_gallery['und'][0]['value'] = dmm_image_prepareBodyToSlideshow($nid, $gallery);
        $extra_data['slideshow_themed'] = dmm_image_prepareBodyToSlideshow($nid, $body_images);
      }
      
      if (!empty($node->field_extra_data['und'][0]['value'])) {
        $node->field_extra_data['und'][0]['value'] = serialize(unserialize($node->field_extra_data['und'][0]['value']) + $extra_data);
      }
      else {
        $node->field_extra_data['und'][0]['value'] = serialize($extra_data);
      }
      
      
      
    } // End of if (in_array($node->type, $content_with_teaser)) {
}


/**
 * Build a trimmed teaser, a main image, a sharing image, etc from a source body.
 */
function dmm_pages_getExtraDataFromBody($node_field_body, $nid, $content_type = NULL, $characters_num = NULL, $only_teaser = FALSE) {
 
  $body = $node_field_body['und'][0]['value'];
  $summary = $node_field_body['und'][0]['summary'];
  
  $main_image_html = NULL;
  $main_image = NULL;
  $matches = NULL;

  // Get the main image for a teaser and for sharing
  // and then clear img tags from the body.
  if (preg_match('/<img[^>]+>/i', $body, $matches)) {
    
    preg_match_all('/(alt|title|src)="([^"]*)"/i', $matches[0], $matches);
    foreach ($matches[1] as $index => $key) {
      $main_image[$key] = $matches[2][$index];
    }
    $main_image['src'] = str_replace('%20', ' ', $main_image['src']);
    $stream_path = dmm_misc_getStreamUriFromRelativePath($main_image['src']);
    $main_image['uri'] = $stream_path;
    
    $image_size = getimagesize(ltrim($main_image['src'], '/'));

    // Scale and cut.
    /*
    if ($image_size[0] / $image_size[1] > 1.5) {
      $main_image_html = theme('image_style', array( 'path' => $stream_path, 'style_name' => 'article_thumbnail_h'));
    }
    else {
      $main_image_html = theme('image_style', array( 'path' => $stream_path, 'style_name' => 'article_thumbnail_v'));
    }
    */

    // Scale only.
    if ($image_size[0] / $image_size[1] > 1) {
      $style_name = 'teaser_thumb_h';
      $main_image_html = theme('image_style', array( 'path' => $stream_path, 'style_name' => $style_name));
    }
    else {
      $style_name = 'teaser_thumb_v';
      $main_image_html = theme('image_style', array( 'path' => $stream_path, 'style_name' => $style_name));
    }
    
    // Image for sharing.
    if ($image_size[0] / $image_size[1] > 1) {
      // Too wide. will not be cutted.
      $main_image['share_themed'] = image_style_url('share_wide', $stream_path);
    }
    elseif ($image_size[1] / $image_size[0] < 1) {
      // Too tall. will not be cutted.
      $main_image['share_themed'] = image_style_url('share_tall', $stream_path);
    }
    else {
      //Normal image, will not be cutted.
      $main_image['share_themed'] = image_style_url('share', $stream_path);
    }
    
    $main_image_html = '<div class="thumb">' . $main_image_html . '</div>';
    
    // Clear img tags out of a body.
    $body = preg_replace('/<img[^>]+>/i', '', $body);
  }

  
  
  // Define a text for a teaser.
  switch ($content_type) {
    
    case 'section':
        // A Section has a full summary or a longer teaser.
        if ($summary) {
          $teaser = strip_tags($summary);
        }
        else {
          $characters_num = 350;
          $teaser = trim(drupal_substr(strip_tags($body), 0, $characters_num));
        }
        
        $teaser = $teaser . '... ' . l(t('Read More'), 'node/' . $nid, array('attributes' => array('class' => array('more'))));
        break;
        
        
        
   default:
        if (!$characters_num) {
          
          if ($main_image_html) {
            $characters_num = 130;
          }
          else {
            $characters_num = 250;
          }
          
        }

        // $teaser = text_summary($body_full_markup, 'full_html', $characters_num);
        if ($summary) {
          $teaser = trim(drupal_substr(strip_tags($summary), 0, $characters_num));
        }
        else {
          $teaser = trim(drupal_substr(strip_tags($body), 0, $characters_num));
        }
        
        // Replace the last word with ...
        // preg_match('/^.*\s(.*)$/i', trim(strip_tags($teaser)), $matches);
        // $last_pos = strrpos($teaser, $matches[1]);
        $last_pos = strrpos($teaser, ' ');
        $teaser = substr_replace($teaser, '... ' . l(t('Read More'), 'node/' . $nid, array('attributes' => array('class' => array('more')))), $last_pos);

        break;
  }
  
  
  
  
  if ($only_teaser) {
    return $main_image_html . $teaser;
  }
  else {
    return array('teaser' => $main_image_html . $teaser, 'main_image' => $main_image);
  }
  
}


/**
 * Implements hook form_alter.
 */
function dmm_pages_form_alter(&$form, &$form_state, $form_id) {
  
  dpm($form_id); dpm($form);
  dpm($form['#id']);

  if (isset($form['field_extra_data'])) {
    $form['field_extra_data']['#access'] = FALSE;
  }
  
  switch($form_id) {
          
    case 'article_node_form':
      
        $extra_data = unserialize($form['field_extra_data']['und'][0]['value']['#default_value']);
      
        $form['dmm_links'] = array(
          '#title' => 'Ссылки',
          '#type' => 'text_format',
          '#format' => 'full_html',
          '#default_value' => $extra_data['dmm_links'],
          '#weight' => 3,
        );
      
    case 'news_post_node_form':
    case 'blog_post_node_form':
    case 'section_node_form':
    case 'master_class_node_form':
        $form['actions']['save_draft'] = array(
          '#type' => 'submit',
          '#value' => 'Save Draft',
          '#submit' => array('node_form_submit'),
          '#weight' => 6,
        );

        $form['#validate'][] = 'dmm_pages_validateForm';
        $form['#submit'][] = 'dmm_pages_submitForm_nodeDraft';
        
        break;
  }
  
  
  
  /*
  switch($form_id) {
    case '':
        break;
  }
  */

}


/**
 * Custom validate of the form.
 *
 * @return void
 *   Return nothing.
 */
function dmm_pages_validateForm(&$form, &$form_state) {
  dpm($form_state['values']);
  
  if (!empty($form_state['values']['dmm_links'])) {
    $extra_data = array(
      'dmm_links' => $form_state['values']['dmm_links'], 
    );
  }

  if (!empty($extra_data)) {
    form_set_value($form['field_extra_data'], array('und' => array(0 => array('value' => serialize($extra_data), 'format' => 'full_html') )), $form_state);
  }
}


/**
 * Custom submit of the form.
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.

 * @return void
 *   Return nothing.
 */
function dmm_pages_submitForm_nodeDraft(&$form, &$form_state) {

  //dpm($form_state['values']);
  if ($form_state['values']['op'] == 'Save Draft') {
    $form_state['values']['status'] = 0;
    drupal_set_message(t('Attention! This content is saved as draft and is not published now!'), 'warning');
      // Doesn't work
      //form_set_value($form['options'], array('status' => array('#default_value' => 0)), $form_state);
      //form_set_value($form['options']['status'], array('#default_value' => 0), $form_state);
  }
  else {
    $form_state['values']['status'] = 1;
  }
}
